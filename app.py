import re
import random
import streamlit as st

# Define tourist places only for AlUla
tourist_places = {
    "ุงูุนูุง": [
        " ูุฏุงุฆู ุตุงูุญ - ูููุน ุฃุซุฑู ูุนูุฏ ุฅูู ุงูุญุถุงุฑุฉ ุงููุจุทูุฉ ููุนุฏ ุฃุญุฏ ููุงูุน ุงูุชุฑุงุซ ุงูุนุงููู ูููููุณูู.",
        " ุฌุจู ุงูููู - ุตุฎุฑุฉ ุถุฎูุฉ ุนูู ุดูู ููู ุชูุนุฏ ูู ุฃุดูุฑ ูุนุงูู ุงูุนูุง.",
        " ุงูุจูุฏุฉ ุงููุฏููุฉ - ุชุฌูุน ุชุงุฑูุฎู ูุนูุณ ุงูุทุงุจุน ุงูุชุฑุงุซู ููุนูุง.",
        " ูุงุญุฉ ุงูุนูุง - ููุทูุฉ ุทุจูุนูุฉ ุฑุงุฆุนุฉ ุชุญูุท ุจูุง ุฃุดุฌุงุฑ ุงููุฎูู.",
        " ููุชุฌุน ุดุงุฏู - ููุงู ูุซุงูู ููุงุณุชุฑุฎุงุก ูุณุท ุงูุทุจูุนุฉ ุงูุฎูุงุจุฉ."
    ], 
    "ุงูุฑูุงุถ": 
    [
        "ุจููููุงุฑุฏ ุฑูุงุถ ุณูุชู, ูุฌูุฉ ุชุฑููููุฉ ูุชูุงููุฉ ุชุถู ูุทุงุนู ูููุงูู ูุนุฑูุถ ุชุฑููููุฉ",
        "ุญุฏููุฉ ุงูููู ุนุจุฏุงููู, ุญุฏููุฉ ุฌูููุฉ ุชุญุชูู ุนูู ูุณุงุญุงุช ุฎุถุฑุงุก ูุจุญูุฑุงุช ูููุงููุฑ ุฑุงูุต ", 
        "ุงููุชุญู ุงููุทูู ุงูุณุนูุฏู, ููุงู ุบูู ุจุงููุนูููุงุช ุนู ุชุงุฑูุฎ ุงูุณุนูุฏูุฉ ูุญุถุงุฑุชูุง", 
        "ูุงุฏู ุญูููุฉ, ูููุน ุทุจูุนู ุฌููู ููุงุณุจ ูููุดู ูุงูุชูุฒู",
        "ุจุฑุฌ ุงูููููุฉ, ุจุฑุฌ ูุถู ุณูููุง ููุทุงุนู ูุฅุทูุงูุฉ ุจุงููุฑุงููุฉ ุนูู ุงูุฑูุงุถ."

    ], 
    "ุฌุฏุฉ"or"ุฌุฏู": 
    [
        "ุฌุฏุฉ: ุฌุฏุฉ ูุฏููุฉ ุณุงุญููุฉ ุฑุงุฆุนุฉ ุนูู ุงูุจุญุฑ ุงูุฃุญูุฑ ูุชุถู ุงูุนุฏูุฏ ูู ุงููุนุงูู ุงูุณูุงุญูุฉ ูุซู ุงูุจูุฏ ุ ูุงุฏู ุงููุฎูุช ุ ูุงูุนุฏูุฏ !",
        "ุงูุจูุฏ: ุงูุจูุฏ ูู ุญู ูู ูุฏููุฉ ุฌุฏุฉุ ููู ูู ุงูุฃุญูุงุก ุงููุฏููุฉ ุฐุงุช ุงูุทุงุจุน ุงูุชุงุฑูุฎู ูุงูุซูุงูู ุงูุนุฑูู. ูุชููุฒ ูุฐุง ุงูุญู ุจุฌููู ุงูุชูููุฏู ุงูุฐู ูุนูุณ ุชุงุฑูุฎ ูุฏููุฉ ุฌุฏุฉ ุงูุนูููุ ููู ูุนุฏ ูุงุญุฏูุง ูู ุฃุดูุฑ ูุนุงูู ุงููุฏููุฉ.",
        "ูุงููุฑุฉ ุงูููู ููุฏ: ุชุนุฏ ูุงููุฑุฉ ุงูููู ููุฏ ุฃุทูู ูุงููุฑุฉ ูู ุงูุนุงููุ ูุชุถูุก ุณูุงุก ุฌุฏุฉ ูููุงู.",
        "ุงูููุฑููุด: ููุฑููุด ุฌุฏุฉ ูุซุงูู ููุงุณุชูุชุงุน ุจุฅุทูุงูุฉ ุงูุจุญุฑ ุงูุฃุญูุฑุ ูุงููุดู ุฃู ุฑููุจ ุงูุฏุฑุงุฌุงุช.",
        "ูุงุฏู ุงููุฎูุช: ูุงุฏู ุงููุฎูุช ูู ุฃูุถู ุงูุฃูุงูู ููุงุณุชูุชุงุน ุจูุดุงูุฏ ุงูุจุญุฑ ุงูุฃุญูุฑ ูุงูุฃูุดุทุฉ ุงููุงุฆูุฉ.",
        "ุงูุจุฑููููุงุฏ: ููุงู ุฑุงุฆุน ููุชุณูู ูุงูุงุณุชูุชุงุน ุจุงูุฃุฌูุงุก ุงูุจุญุฑูุฉ ูุน ุงูุนุฏูุฏ ูู ุงููุทุงุนู ูุงูููุงูู.",
         "ุณูุชู ููู: ูุฑูุฒ ุชุฑูููู ูุถู ุฃูุดุทุฉ ููุชุนุฉ ูุซู ุงูุนุฑูุถ ุงูุญูุฉ ูุงููุทุงุนู.",
        "ุงููุทุงุนู ุงูุดููุฑุฉ: ุจุนุถ ุงููุทุงุนู ุงูุดููุฑุฉ ูู ุฌุฏุฉ: ูุทุนู ุงููุงููุฑุฉุ ูุทุนู ุงูุจููุ ููุทุนู ุจููุง.",
        "ุงููุนุงูู ุงูุณูุงุญูุฉ: ุชุถู ุฌุฏุฉ ุงูุนุฏูุฏ ูู ุงููุนุงูู ุงูุณูุงุญูุฉ ูุซู ุงูุจูุฏ ุ ูุงุฏู ุงููุฎูุช ุ ูุงููุฑุฉ ุงูููู ููุฏุ ุฌุฏุฉุ ุจูุฑ ุ ุงูุจุฑููููุงุฏุ ุณูุชู ูููุ ูุจุนุถ ูู ุงููุทุงุนู ุงูุดููุฑุฉ.",
    ],
    "ุงููุตูู": 
    [
        "ุจุฑุฌ ุงูุดูุงูุฉ: ุจุฑุฌ ุงูุดูุงูุฉ ูู ูุนูู ุชุงุฑูุฎู ููุน ูู ูุญุงูุธุฉ ุงูุฑุณุ ููู ุจุฑุฌ ูุฑุงูุจุฉ ุจููู ูุจู ุฃูุซุฑ ูู 200 ุนุงูุ ููุนุฏ ูู ุงูุดูุงูุฏ ุงูุชุงุฑูุฎูุฉ ูู ุงููุตูู.",
        "ุณูู ุงููุณููู: ุณูู ุงููุณููู ูู ุณูู ุชุฑุงุซู ูู ุนููุฒุฉ ูุนูุณ ุงูุทุฑุงุฒ ุงูุนูุฑุงูู ุงููุฏูู ููุถู ูุชุงุฌุฑ ููุญุฑู ุงููุฏููุฉ ูุงูููุชุฌุงุช ุงูุชูููุฏูุฉ.",
        "ูุชุญู ุงูุนูููุงุช: ูุชุญู ุงูุนูููุงุช ูู ุจุฑูุฏุฉ ูุนุฑุถ ุชุงุฑูุฎ ููุงูู ุงูุนูููุงุช ุงูุฐูู ูุงููุง ูุณุงูุฑูู ููุชุฌุงุฑุฉ ุจูู ุงูุฌุฒูุฑุฉ ุงูุนุฑุจูุฉ ูุงูุดุงู ูุงูุนุฑุงู.",
        "ูุฑูุฉ ุงููุฐูุจ ุงูุชุฑุงุซูุฉ: ูุฑูุฉ ุงููุฐูุจ ุงูุชุฑุงุซูุฉ ูู ูุฑูุฉ ุชุงุฑูุฎูุฉ ุชูุซู ุงูุทุฑุงุฒ ุงููุนูุงุฑู ุงููุฏูู ูููุทูุฉ ุงููุตููุ ูุชุถู ุจููุชูุง ุทูููุฉ ูุฃุณูุงููุง ูุฏููุฉ ุชุนูุณ ุงูุชุฑุงุซ ุงูุดุนุจู."
    ], 
    "ุฃุจูุง"or "ุงุจูุง": 
    [
        "ุงุจูุง: ุฃุจูุง ุชุชููุฒ ุจููุงุธุฑูุง ุงูุฎูุงุจุฉ ูุซู ุฌุจู ุงูุณูุฏุฉ ูุญุฏููุฉ ุฃุจู ุฎูุงู! ๐ฟ",
    "ุงูุณูุฏุฉ: ุงูุณูุฏุฉ ุชูุน ูู ููุทูุฉ ุนุณูุฑ ุฌููุจ ุงูุณุนูุฏูุฉุ ููู ูุงุญุฏุฉ ูู ุฃุฌูู ุงููุฌูุงุช ุงูุณูุงุญูุฉ ูู ุงูููููุฉ. ุชุชููุฒ ุจุงุฑุชูุงุนูุง ุงูุฐู ูุตู ุฅูู 3,015 ูุชุฑูุง ููู ุณุทุญ ุงูุจุญุฑุ ููุง ูุฌุนููุง ุงูููุงู ุงูุฃุจุฑุฏ ูู ุงูููููุฉ. ููุงุฎูุง ูุนุชุฏู ุตูููุง ูุจุงุฑุฏ ุดุชุงุกูุ ูุฐุง ุงุญุฑุต ุนูู ุฅุญุถุงุฑ ููุงุจุณ ุฏุงูุฆุฉ ุญุชู ูู ุงูุตูู.",
    "ุญุฏููุฉ ุงุจู ุฎูุงู: ุชูุน ุนูู ุญุงูุฉ ุฌุจุงู ุงูุณูุฏุฉุ ูุชููุฑ ุฅุทูุงูุงุช ุจุงููุฑุงููุฉ ุฑุงุฆุนุฉ ุนูู ูุฏููุฉ ุฃุจูุง. ูุซุงููุฉ ููุนุงุฆูุงุช ููุญุจู ุงููุฏูุกุ ูุน ูุณุงุญุงุช ุฎุถุฑุงุก ูุงุณุนุฉ ูููุงุทู ููุฌููุณ. ุชุถู ููุฑุงุช ูููุดูุ ูููุนุจ ุฃุทูุงูุ ููุงูููุงุช ุจุณูุทุฉ ููุงุณุชุฑุงุญุฉ. ููุทู ููุนุฏูุฏ ูู ุงููุฑูุฏ ุงูุจุฑูุฉุ ูุฐุง ูููุถู ุงูุญุฐุฑ ุนูุฏ ุฅุญุถุงุฑ ุงูุทุนุงู. ุฃูุถู ููุช ููุฒูุงุฑุฉ: ุงูุตุจุงุญ ุงูุจุงูุฑ ุฃู ูุจู ุงูุบุฑูุจ ููุงุณุชูุชุงุน ุจุงููุดูุฏ ุงูุจุงููุฑุงูู."
    ],
    


}

# Random greetings
greetings = ["ููุง ูุงููู!", "ุฃูููุง ูุณูููุง!", "ูุฑุญุจุง!", "ูุง ููุง! ููู ุฃูุฏุฑ ุฃุณุงุนุฏูุ", "ููุง ูุงููู! ูุด ุญุงุจ ุฃูุชุฑุญ ูู ุฃูุงูู ุชุฒูุฑูุงุ", 
             "ูุฑุญุจูุง! ุชุจู ุชุนุฑู ุนู ุงูุฃูุงูู ุงูุณูุงุญูุฉ ูู ุงูููููุฉ ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉ", "ุฃูููุง! ูุฏูู ุชุนุฑู ุนู ุงูุฃูุงูู ุงูุญููุฉ ูู ุงู ููุทูุฉ ูู ุงููุฐููุฑุฉ ููู ุ", 
             "ููุง! ุชุจู ุชุนุฑู ุนู ุงูุฃูุงูู ุงูุณูุงุญูุฉ ูู ุงูุณุนูุฏูุฉุ"]

# Random denial responses for unrelated questions
denial_responses = [
    "ุฃูุง ุฃุฌุงูุจ ุนู ุงูุณูุงุญุฉ ููุทุ ุงุณุฃููู ุนู ุงูุฃูุงูู ุงูุญููุฉ! ๐",
    "ูุง ุฃูุฏุฑ ุฃุฌุงูุจ ุนูู ูุฐุงุ ููู ุฃูุฏุฑ ุฃูุชุฑุญ ูู ุฃูุงูู ุณูุงุญูุฉ ุฑุงุฆุนุฉ! ๐",
    "ุฎููุง ุจุณ ูู ุงูุณูุงุญุฉุ ูุด ุงูููุงู ุงููู ุชุญุจ ุชุนุฑู ุนููุ ๐",
    "ูุง ูููุช ุณุคุงููุ ุจุณ ุฃูุฏุฑ ุฃุณุงุนุฏู ูู ุงูุณูุงุญุฉ! ๐ค",
    "ูุง ุนูุฏู ููุฑุฉ ุนู ูุฐุงุ ุจุณ ุนูุฏู ููุฑุฉ ุนู ุงูุฃูุงูู ุงูุณูุงุญูุฉ! ๐",
    "ููุฃุณูุ ูุนูููุงุชู ุนู ุงูุณูุงุญุฉ ููุท! ูุฏูู ุชุณุงูุฑ ููุนูุงุ ุฃูุฏุฑ ุฃุฑุดุญ ูู ุฃูุงูู ุญููุฉ โ๏ธ",
    "ุฃูุง ูุชุฎุตุต ูู ุงูุณูุงุญุฉุ ุชุจู ุชุนุฑู ุนู ุฃูุงูู ูููุฒุฉุ"
]

# Define the NLP model responses uising regex patterns
patterns = [
    # More flexible greetings matching 

                                        #AlUla
    (r'^(ูุฑุญุจุง|ููุง|ุฃูููุง|ุงูููู|ุงูุณูุงู ุนูููู|ุงูุณูุงู)$', lambda: random.choice(greetings)),  
    
    # Thank you responses
    (r'^(ุดูุฑุง|ุดูุฑุงู|ุดูุฑูุง|ูุดููุฑ|ูุนุทูู ุงูุนุงููุฉ)$', lambda: "ุนูู ุงูุฑุญุจ ูุงูุณุนุฉ! ๐"),  
    # This pattern now matches when "ุงูุนูุง" appears anywhere in the sentence along with suggestion words
    (r'(ุชูุฏุฑ|ููููู|ูููู|ูู).*?(ุงูุชุฑุงุญ|ุชูุชุฑุญ|ุชุฑุดูุญ|ุชูุตุญูู|ุชุนุทููู|ุชุฑุดุญ).*?(ุงูุนูุง)', 
     lambda: "๐ ุจุงูุทุจุน! ููููู ุฒูุงุฑุฉ:\n- " + "\n- ".join(tourist_places["ุงูุนูุง"])),
    # Add separate pattern to catch queries containing both "places" and "AlUla" --
    (r'(ููุงู|ุงูุงูู|ุฃูุงูู|ูุญูุงุช).*?(ุงูุนูุง)|(ุงูุนูุง).*?(ููุงู|ุงูุงูู|ุฃูุงูู|ูุญูุงุช)', 
     lambda: "โจ ุงูุฃูุงูู ุงูุณูุงุญูุฉ ูู ุงูุนูุง:\n- " + "\n- ".join(tourist_places["ุงูุนูุง"])),
        # Detecting best places in AlUla with more flexibility
    (r'(ุงูุด|ูุง ูู|ูุงูู|ูููู ุชูููู|ูุฏููู ุฃุนุฑู).*?(ุงูุถู|ุฃุญุณู|ุฃุฑูุน).*?(ุงูุฃูุงูู|ุงูุงูุงูู).*?(ูู ุงูุนูุง|ุจุงูุนูุง|ุงูุนูุง)', 
     lambda: "โจ ุงูุฃูุงูู ุงูุณูุงุญูุฉ ูู ุงูุนูุง:\n- " + "\n- ".join(tourist_places["ุงูุนูุง"])),  
        # Matching "I want to travel to AlUla" + "suggest places"
    (r'.*(ุฃุฑูุฏ|ูุฏู|ููุณู|ุญุงุจุจ).*?(ุฃุณุงูุฑ|ุฃุฒูุฑ|ุฃุฑูุญ).*?(ุฅูู ุงูุนูุง|ููุนูุง|ุงูุนูุง).*?(ููุงู|ุฃูุงูู|ุชุฑุดูุญ|ุงูุชุฑุงุญ|ุชูุตุญูู|ุชุนุทููู)?.*?',
     lambda: "๐ ุฑุงุฆุน! ูุฐู ุจุนุถ ุงูุฃูุงูู ุงูุชู ููููู ุฒูุงุฑุชูุง ูู ุงูุนูุง:\n- " + "\n- ".join(tourist_places["ุงูุนูุง"])),  
    # If the user just says "ุงูุนูุง", assume they want tourist places
    (r'^(ุงูุนูุง|ูู ุงูุนูุง|ุจุงูุนูุง)$', 

     lambda: "โจ ุงูุฃูุงูู ุงูุณูุงุญูุฉ ูู ุงูุนูุง:\n- " + "\n- ".join(tourist_places["ุงูุนูุง"])),  
                                        #ูRiyadh
    (r'^(ุดูุฑุง|ุดูุฑุงู|ุดูุฑูุง|ูุดููุฑ|ูุนุทูู ุงูุนุงููุฉ)$', lambda: "ุนูู ุงูุฑุญุจ ูุงูุณุนุฉ! ๐"),  
    # This pattern now matches when "ุงูุฑูุงุถ" appears anywhere in the sentence along with suggestion words
    (r'(ุชูุฏุฑ|ููููู|ูููู|ูู).*?(ุงูุชุฑุงุญ|ุชูุชุฑุญ|ุชุฑุดูุญ|ุชูุตุญูู|ุชุนุทููู|ุชุฑุดุญ).*?(ุงูุฑูุงุถ)', 
     lambda: "๐ ุจุงูุทุจุน! ููููู ุฒูุงุฑุฉ:\n- " + "\n- ".join(tourist_places["ุงูุฑูุงุถ"])),
    # Add separate pattern to catch queries containing both "places" and "Riyadh" --
    (r'(ููุงู|ุงูุงูู|ุฃูุงูู|ูุญูุงุช).*?(ุงูุฑูุงุถ)|(ุงูุฑูุงุถ).*?(ููุงู|ุงูุงูู|ุฃูุงูู|ูุญูุงุช)', 
     lambda: "โจ ุงูุฃูุงูู ุงูุณูุงุญูุฉ ูู ุงูุฑูุงุถ:\n- " + "\n- ".join(tourist_places["ุงูุฑูุงุถ"])),
        # Detecting best places in Riyadh with more flexibility
    (r'(ุงูุด|ูุง ูู|ูุงูู|ูููู ุชูููู|ูุฏููู ุฃุนุฑู).*?(ุงูุถู|ุฃุญุณู|ุฃุฑูุน).*?(ุงูุฃูุงูู|ุงูุงูุงูู).*?(ูู ุงูุฑูุงุถ|ุจุงูุฑูุงุถ|ุงูุฑูุงุถ)', 
     lambda: "โจ ุงูุฃูุงูู ุงูุณูุงุญูุฉ ูู ุงูุฑูุงุถ:\n- " + "\n- ".join(tourist_places["ุงูุฑูุงุถ"])),  
        # Matching "I want to travel to Riyadh" + "suggest places"
    (r'.*(ุฃุฑูุฏ|ูุฏู|ููุณู|ุญุงุจุจ).*?(ุฃุณุงูุฑ|ุฃุฒูุฑ|ุฃุฑูุญ).*?(ุฅูู ุงูุฑูุงุถ|ููุฑูุงุถ|ุงูุฑูุงุถ).*?(ููุงู|ุฃูุงูู|ุชุฑุดูุญ|ุงูุชุฑุงุญ|ุชูุตุญูู|ุชุนุทููู)?.*?',
     lambda: "๐ ุฑุงุฆุน! ูุฐู ุจุนุถ ุงูุฃูุงูู ุงูุชู ููููู ุฒูุงุฑุชูุง ูู ุงูุฑูุงุถ:\n- " + "\n- ".join(tourist_places["ุงูุฑูุงุถ"])),  
    # If the user just says "ุงูุฑูุงุถ", assume they want tourist places
    (r'^(ุงูุฑูุงุถ|ูู ุงูุฑูุงุถ|ุจุงูุฑูุงุถ)$', 
     lambda: "โจ ุงูุฃูุงูู ุงูุณูุงุญูุฉ ูู ุงูุฑูุงุถ:\n- " + "\n- ".join(tourist_places["ุงูุฑูุงุถ"])),  

                                        #Jeddah 
    (r'^(ุดูุฑุง|ุดูุฑุงู|ุดูุฑูุง|ูุดููุฑ|ูุนุทูู ุงูุนุงููุฉ)$', lambda: "ุนูู ุงูุฑุญุจ ูุงูุณุนุฉ! ๐"),  
    # This pattern now matches when "ุฌุฏุฉ" appears anywhere in the sentence along with suggestion words
    (r'(ุชูุฏุฑ|ููููู|ูููู|ูู).*?(ุงูุชุฑุงุญ|ุชูุชุฑุญ|ุชุฑุดูุญ|ุชูุตุญูู|ุชุนุทููู|ุชุฑุดุญ).*?(ุฌุฏุฉ)', 
     lambda: "๐ ุจุงูุทุจุน! ููููู ุฒูุงุฑุฉ:\n- " + "\n- ".join(tourist_places["ุฌุฏุฉ"])),
    # Add separate pattern to catch queries containing both "places" and "Jeddah" --
    (r'(ููุงู|ุงูุงูู|ุฃูุงูู|ูุญูุงุช).*?(ุฌุฏุฉ)|(ุฌุฏุฉ).*?(ููุงู|ุงูุงูู|ุฃูุงูู|ูุญูุงุช)', 
     lambda: "โจ ุงูุฃูุงูู ุงูุณูุงุญูุฉ ูู ุฌุฏุฉ:\n- " + "\n- ".join(tourist_places["ุฌุฏุฉ"])),
        # Detecting best places in Jeddah with more flexibility
    (r'(ุงูุด|ูุง ูู|ูุงูู|ูููู ุชูููู|ูุฏููู ุฃุนุฑู).*?(ุงูุถู|ุฃุญุณู|ุฃุฑูุน).*?(ุงูุฃูุงูู|ุงูุงูุงูู).*?(ูู ุฌุฏุฉ|ุจุฌุฏุฉ|ุฌุฏุฉ)', 
     lambda: "โจ ุงูุฃูุงูู ุงูุณูุงุญูุฉ ูู ุฌุฏุฉ:\n- " + "\n- ".join(tourist_places["ุฌุฏุฉ"])),  
        # Matching "I want to travel to Jeddah" + "suggest places"
    (r'.*(ุฃุฑูุฏ|ูุฏู|ููุณู|ุญุงุจุจ).*?(ุฃุณุงูุฑ|ุฃุฒูุฑ|ุฃุฑูุญ).*?(ุฅูู ุฌุฏุฉ|ูุฌุฏุฉ|ุฌุฏุฉ).*?(ููุงู|ุฃูุงูู|ุชุฑุดูุญ|ุงูุชุฑุงุญ|ุชูุตุญูู|ุชุนุทููู)?.*?',
     lambda: "๐ข ุฑุงุฆุน! ูุฐู ุจุนุถ ุงูุฃูุงูู ุงูุชู ููููู ุฒูุงุฑุชูุง ูู ุฌุฏุฉ:\n- " + "\n- ".join(tourist_places["ุฌุฏุฉ"])),  
    # If the user just says "ุฌุฏุฉ", assume they want tourist places
    (r'^(ุฌุฏุฉ|ูู ุฌุฏุฉ|ุจุฌุฏุฉ)$', 
     lambda: "โจ ุงูุฃูุงูู ุงูุณูุงุญูุฉ ูู ุฌุฏุฉ:\n- " + "\n- ".join(tourist_places["ุฌุฏุฉ"])),  

                                        #ูQassim 
    (r'^(ุดูุฑุง|ุดูุฑุงู|ุดูุฑูุง|ูุดููุฑ|ูุนุทูู ุงูุนุงููุฉ)$', lambda: "ุนูู ุงูุฑุญุจ ูุงูุณุนุฉ! ๐"),  
    # This pattern now matches when "ุงููุตูู" appears anywhere in the sentence along with suggestion words
    (r'(ุชูุฏุฑ|ููููู|ูููู|ูู).*?(ุงูุชุฑุงุญ|ุชูุชุฑุญ|ุชุฑุดูุญ|ุชูุตุญูู|ุชุนุทููู|ุชุฑุดุญ).*?(ุงููุตูู)', 
     lambda: "๐ด ุจุงูุทุจุน! ููููู ุฒูุงุฑุฉ:\n- " + "\n- ".join(tourist_places["ุงููุตูู"])),
    # Add separate pattern to catch queries containing both "places" and "Al-Qassim" --
    (r'(ููุงู|ุงูุงูู|ุฃูุงูู|ูุญูุงุช).*?(ุงููุตูู)|(ุงููุตูู).*?(ููุงู|ุงูุงูู|ุฃูุงูู|ูุญูุงุช)', 
     lambda: "โจ ุงูุฃูุงูู ุงูุณูุงุญูุฉ ูู ุงููุตูู:\n- " + "\n- ".join(tourist_places["ุงููุตูู"])),
        # Detecting best places in Al-Qassim with more flexibility
    (r'(ุงูุด|ูุง ูู|ูุงูู|ูููู ุชูููู|ูุฏููู ุฃุนุฑู).*?(ุงูุถู|ุฃุญุณู|ุฃุฑูุน).*?(ุงูุฃูุงูู|ุงูุงูุงูู).*?(ูู ุงููุตูู|ุจุงููุตูู|ุงููุตูู)', 
     lambda: "โจ ุงูุฃูุงูู ุงูุณูุงุญูุฉ ูู ุงููุตูู:\n- " + "\n- ".join(tourist_places["ุงููุตูู"])),  
        # Matching "I want to travel to Al-Qassim" + "suggest places"
    (r'.*(ุฃุฑูุฏ|ูุฏู|ููุณู|ุญุงุจุจ).*?(ุฃุณุงูุฑ|ุฃุฒูุฑ|ุฃุฑูุญ).*?(ุฅูู ุงููุตูู|ูููุตูู|ุงููุตูู).*?(ููุงู|ุฃูุงูู|ุชุฑุดูุญ|ุงูุชุฑุงุญ|ุชูุตุญูู|ุชุนุทููู)?.*?',
     lambda: "๐ ุฑุงุฆุน! ูุฐู ุจุนุถ ุงูุฃูุงูู ุงูุชู ููููู ุฒูุงุฑุชูุง ูู ุงููุตูู:\n- " + "\n- ".join(tourist_places["ุงููุตูู"])),  
    # If the user just says "ุงููุตูู", assume they want tourist places
    (r'^(ุงููุตูู|ูู ุงููุตูู|ุจุงููุตูู)$', 
     lambda: "โจ ุงูุฃูุงูู ุงูุณูุงุญูุฉ ูู ุงููุตูู:\n- " + "\n- ".join(tourist_places["ุงููุตูู"])),  

                                        #Abha 
    (r'^(ุดูุฑุง|ุดูุฑุงู|ุดูุฑูุง|ูุดููุฑ|ูุนุทูู ุงูุนุงููุฉ)$', lambda: "ุนูู ุงูุฑุญุจ ูุงูุณุนุฉ! ๐"),  
    # This pattern now matches when "ุฃุจูุง" or "ุงุจูุง" appears anywhere in the sentence along with suggestion words
    (r'(ุชูุฏุฑ|ููููู|ูููู|ูู).*?(ุงูุชุฑุงุญ|ุชูุชุฑุญ|ุชุฑุดูุญ|ุชูุตุญูู|ุชุนุทููู|ุชุฑุดุญ).*?(ุฃุจูุง|ุงุจูุง)', 
    lambda: "๐ ุจุงูุทุจุน! ููููู ุฒูุงุฑุฉ:\n- " + "\n- ".join(tourist_places["ุฃุจูุง"])),  
    # Add separate pattern to catch queries containing both "places" and "Abha"  
    (r'(ููุงู|ุงูุงูู|ุฃูุงูู|ูุญูุงุช).*?(ุฃุจูุง|ุงุจูุง)|(ุฃุจูุง|ุงุจูุง).*?(ููุงู|ุงูุงูู|ุฃูุงูู|ูุญูุงุช)', 
    lambda: "โจ ุงูุฃูุงูู ุงูุณูุงุญูุฉ ูู ุฃุจูุง:\n- " + "\n- ".join(tourist_places["ุฃุจูุง"])),  
    # Detecting best places in Abha with more flexibility  
    (r'(ุงูุด|ูุง ูู|ูุงูู|ูููู ุชูููู|ูุฏููู ุฃุนุฑู).*?(ุงูุถู|ุฃุญุณู|ุฃุฑูุน).*?(ุงูุฃูุงูู|ุงูุงูุงูู).*?(ูู ุฃุจูุง|ุจุฃุจูุง|ุฃุจูุง|ูู ุงุจูุง|ุจุงุจูุง|ุงุจูุง)', 
    lambda: "โจ ุงูุฃูุงูู ุงูุณูุงุญูุฉ ูู ุฃุจูุง:\n- " + "\n- ".join(tourist_places["ุฃุจูุง"])),  
    # Matching "I want to travel to Abha" + "suggest places"  
    (r'.*(ุฃุฑูุฏ|ูุฏู|ููุณู|ุญุงุจุจ).*?(ุฃุณุงูุฑ|ุฃุฒูุฑ|ุฃุฑูุญ).*?(ุฅูู ุฃุจูุง|ูุฃุจูุง|ุฃุจูุง|ุงูู ุงุจูุง|ูุงุจูุง|ุงุจูุง).*?(ููุงู|ุฃูุงูู|ุชุฑุดูุญ|ุงูุชุฑุงุญ|ุชูุตุญูู|ุชุนุทููู)?.*?', 
    lambda: "๐ ุฑุงุฆุน! ูุฐู ุจุนุถ ุงูุฃูุงูู ุงูุชู ููููู ุฒูุงุฑุชูุง ูู ุฃุจูุง:\n- " + "\n- ".join(tourist_places["ุฃุจูุง"])),  
    # If the user just says "ุฃุจูุง" or "ุงุจูุง", assume they want tourist places  
    (r'^(ุฃุจูุง|ูู ุฃุจูุง|ุจุฃุจูุง|ุงุจูุง|ูู ุงุจูุง|ุจุงุจูุง)$', 
    lambda: "โจ ุงูุฃูุงูู ุงูุณูุงุญูุฉ ูู ุฃุจูุง:\n- " + "\n- ".join(tourist_places["ุฃุจูุง"])),  


    

    # If the user asks an unknown question
    (r'^(.*\?|.*ุ)$', lambda: random.choice(denial_responses)),  
    
    # Default response for anything else
    (r'.*', lambda: random.choice(denial_responses))  
]

# Function to process user input using regex
def respond(user_input):
    for pattern, response_func in patterns:
        match = re.search(pattern, user_input, re.IGNORECASE)
        if match:
            print(f"Matched pattern: {pattern}")
            return response_func()
        
    print("No pattern matched")
    return random.choice(denial_responses)  # Default response if no match

def mergedchat():
    st.title("๐ค ูุฌููููุ ูู ุจูุช ููุณูุงุญุฉ ูู ุงูุณุนูุฏูุฉ")
    st.write("ูุฑุญุจูุง! ููู ูููููู ูุณุงุนุฏุชู ูู ุงุณุชูุดุงู ุงููุนุงูู ุงูุณูุงุญูุฉ ูู ุงูุณุนูุฏูุฉุ ุญุงุจุจ ุชุนุฑู ุนู ุงุจูุง, ุฌุฏุฉ, ุงููุตูู, ุงูุนูุง ุงู ุงูุฑูุงุถ")


    # Initialize session state for chat history
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # Display chat history
    
    for role, text in st.session_state.messages:
        if role == "user":
            st.markdown(
                f"""
                <div style="background-color:#4b7196; padding:10px; border-radius:8px; margin-bottom:5px; direction:rtl; text-align:right;">
                    <span style="font-size:14px; font-weight:bold; color:white;"> ุฃูุช๐ค: {text}</span> 
                </div>
                """,

                unsafe_allow_html=True
            )
        else:
            
            formatted_text = text.replace("\n- ", "\n\n๐น ")  
            st.markdown(
                f"""
                <div style="background-color:#2c3e50; padding:10px; border-radius:8px; margin-bottom:5px; direction:rtl; text-align:right;">
                    <span style="font-size:14px; font-weight:bold; color:white;">ูุฌูููู ุจูุช๐ค: {formatted_text}</span> 
                </div>
                """,
                unsafe_allow_html=True
            )
    # Create a separate session state key for input field
    if "user_input" not in st.session_state:
        st.session_state.user_input = ""

    # Chat input field with submit button
    with st.form(key="chat_form"):
        user_input = st.text_input("โ๏ธ ุงูุชุจ ุณุคุงูู ููุง:", value=st.session_state.user_input, key="input_field")
        submit_button = st.form_submit_button("ุฅุฑุณุงู")
    if st.button("๐๏ธ ูุณุญ ุงููุญุงุฏุซุฉ"):
        st.session_state.messages = []
        st.rerun()
    # Process input only when submit button is clicked
    if submit_button and user_input:
        # Get bot response
        bot_response = respond(user_input)
        
        # Append user message to chat history
        st.session_state.messages.append(("user", user_input))
        
        # Append bot response to chat history
        st.session_state.messages.append(("bot", bot_response))
        
        st.session_state.user_input = ""  
        

        st.rerun()

st.set_page_config(page_title="ุงูุณูุงุญุฉ ูู ุงูุณุนูุฏูุฉ")
page = st.sidebar.radio("ุงูุชูู ุฅูู:", ["ุงูุฑุฆูุณูุฉ", "ุงููุญุงุฏุซุฉ", "ุงููุฑูู"])

if page == "ุงูุฑุฆูุณูุฉ":
    st.title("๐ค ุดุงุช ุจูุช ุงูุณูุงุญุฉ ูู ุงูุณุนูุฏูุฉ!")
    st.write("ุดุงุช ุจูุช ุงูุณูุงุญุฉ ูู ุงูุณุนูุฏูุฉ ูู ูุณุงุนุฏ ุฐูุงุก ุงุตุทูุงุนู")
    st.write("ูุชูููุฑ ูุนูููุงุช ุนู ุฃุจุฑุฒ ุงููุนุงูู ุงูุณูุงุญูุฉ ูู ุฃุจูุงุ ุฌุฏุฉุ ุงูุฑูุงุถุ ุงูุนูุงุ ูุงููุตูู ููุณุชุฎุฏู ุชูููุงุช ูุนุงูุฌุฉ ุงููุบุงุช ุงูุทุจูุนูุฉุ") 
    st.write("ููุง ูุณุงุนุฏ ุงููุณุชุฎุฏููู ูู ุงุณุชูุดุงู ุงูููููุฉ ุจุณูููุฉ.")
    st.write("ุฃูุชูู ูุตูุญุฉ ุงููุญุงุฏุซุฉ ููุจุฏุฃ")
    st.image("https://maaal.com/wp-content/uploads/2021/02/%D8%B3%D9%8A%D8%A7%D8%AD%D8%A9-%D8%A7%D9%84%D8%B3%D8%B9%D9%88%D8%AF%D9%8A%D8%A9.jpg", use_container_width=True)


elif page == "ุงููุญุงุฏุซุฉ":
    mergedchat()

elif page == "ุงููุฑูู":
    st.title("๐ฅ ูุฑูู 3")

    team_members = [
        ("ุนุจุฏุงูุนุฒูุฒ", "ุชุทููุฑ ุฌุฒุฆูุฉ ุงูุดุงุช ุงูุฎุงุตุฉ ุจุงูุนูุง"),
        ("ูุณู", "ุชุทููุฑ ุฌุฒุฆูุฉ ุงูุดุงุช ุงูุฎุงุตุฉ ุจุฌุฏุฉ"),
        ("ุนุจุฏุงููุญุณู", "ุชุทููุฑ ุฌุฒุฆูุฉ ุงูุดุงุช ุงูุฎุงุตุฉ ุจุงููุตูู"),
        ("ุงููููู", "ุชุทููุฑ ุฌุฒุฆูุฉ ุงูุดุงุช ุงูุฎุงุตุฉ ุจุงูุฑูุงุถ"),
        ("ูููุฏ", "ุชุทููุฑ ุฌุฒุฆูุฉ ุงูุดุงุช ุงูุฎุงุตุฉ ุจุฃุจูุง"),
    ]

    for name, role in team_members:
        st.markdown(
            f"""
            <div style="background-color:#2c3e50; padding:10px; border-radius:8px; margin-bottom:5px;">
                <span style="font-size:14px; font-weight:bold; color:white;">ุงููุทูุฑ: {name}</span>
                <br>
                <span style="font-size:14px; color:white;">ุงูุฏูุฑ: {role}</span>
            </div>
            """, 
            unsafe_allow_html=True
        )
